***LOC***
textstripper.html
***END***


***TITLE***
Text Stripping Tool
***END***

***Summary***
This is a simple tool that I made to strip HTML out of transcripts I was copying and pasting. I also ocasionally run into situations where there are many superscripts and it gets tedious to remove them all by hand. Just note that the tool is a little indiscriminate, and you might loose things if you write even simple math in the text ie "2<3, 3<=4" will be butchered by the tool. 
***END***

***TAGS***
Tools
***END***

***Body***

<div>
<label for="input-box"><b>Input (Paste Rich Text Here)</b></label>
<div id="input-box" class="text-box" contenteditable="true">
<p>Here is some demo formatting</p>
<p><a href="#">Link</a>, <b>bold</b> and <i>italics</i>.</p>
<p>Sub/super scripts: H<sub>2</sub>O<span style="vertical-align: sub;">2</span> / E = mc<sup>2</sup>. </p>
<ul><li>List item 1</li><li>List item 2</li></ul>
</div>
</div>

<div class="controls">
    <label><b>Processing Options</b></label>
    <div class="checkbox-group">
        <input type="checkbox" id="strip-html-check" name="strip-html">
        <label for="strip-html-check">Strip HTML Tags (keeps text content)</label>
    </div>
    <div class="checkbox-group">
        <input type="checkbox" id="strip-subsuper-check" name="strip-subsuper">
        <label for="strip-subsuper-check">Remove Superscript/Subscript Text</label>
    </div>
    <div class="actions">
        <button id="process-btn" onclick="handleProcessClick()">Process Text</button>
        <button id="copy-btn" onclick="handleCopyClick()">Copy</button>
    </div>
</div>

<div>
    <label for="output-box"><b>Output (Plain Text)</b></label>
    <textarea id="output-box" class="text-box" readonly placeholder="Result will appear here..."></textarea>
</div>
***END***

***LOCAL***
<style>
    .text-box {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 0.75rem;
        min-height: 200px;
        width: 100%;
        box-sizing: border-box;
        font-size: 1rem;
        line-height: 1.5;
        resize: vertical;
    }
    #input-box {
        overflow-y: auto;
		background-color: #ffffff;
	}
	#output-box {
	  background-color: #f0f0f0;
	}
    .controls {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        padding: 1rem;
        background-color: #f9fafb;
        border-radius: 4px;
    }
    .checkbox-group {
        display: flex;
        align-items: center;
    }
    .checkbox-group input {
        margin-right: 0.5rem;
    }
    .actions {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }
    button {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    #process-btn {
        background-color: #007bff;
        color: white;
        flex-grow: 1;
    }
    #process-btn:hover {
        background-color: #0056b3;
    }
    #copy-btn {
        background-color: #6c757d;
        color: white;
    }
    #copy-btn:hover {
        background-color: #5a6268;
    }
</style>
<script defer>
    // --- Core Functions ---
    /**
     * Removes <sup> and <sub> tags and their content.
     * Also removes <span> tags styled with vertical-align: sub/super.
     */
    function removeSubSuper(htmlString) {
        let processedString = htmlString;
        processedString = processedString.replace(/<su[bp][^>]*>.*?<\/su[bp]>/gi, '');
        processedString = processedString.replace(/<span[^>]*style="[^"]*vertical-align:\s*(sub|super)[^"]*"[^>]*>.*?<\/span>/gi, '');
        return processedString;
    }
    /**
     * Removes all HTML tags from a string, but keeps the inner content.
     * First, it removes script/style blocks entirely for security.
     */
    function stripHtmlTags(htmlString) {
        let processedString = htmlString;
        processedString = processedString.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');
        processedString = processedString.replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, '');
        return processedString.replace(/<[^>]*>/g, '');
    }
    /**
     * Decodes HTML entities (e.g., &amp; -> &) by leveraging the browser's parser.
     */
    function decodeHtmlEntities(text) {
        const tempTextArea = document.createElement('textarea');
        tempTextArea.innerHTML = text;
        return tempTextArea.value;
    }
    // --- Event Handlers ---
    /**
     * Main handler to process the text based on selected checkboxes.
     */
    function handleProcessClick() {
        let processedText = document.getElementById('input-box').innerHTML;
        if (document.getElementById('strip-subsuper-check').checked) {
            processedText = removeSubSuper(processedText);
        }
        if (document.getElementById('strip-html-check').checked) {
            processedText = stripHtmlTags(processedText);
        }
        // Always decode entities at the end for a clean plain-text result
        document.getElementById('output-box').value = decodeHtmlEntities(processedText);
    }
    /**
     * Copies the output text to the clipboard and provides user feedback.
     */
    function handleCopyClick() {
        if (!document.getElementById('output-box').value){
        	return; // Don't copy if empty
        }
        
        let copyBtn = document.getElementById('copy-btn');
        
        navigator.clipboard.writeText(document.getElementById('output-box').value).then(() => {
            const originalText = copyBtn.textContent;
            copyBtn.textContent = 'Copied!';
            setTimeout(() => {
                copyBtn.textContent = originalText;
            }, 2000); // Revert after 2 seconds
        }).catch(err => {
            console.error('Failed to copy text: ', err);
        });
    }
</script>
***END***

***MODTIME***
August 15, 2025, 10:35 PM
***END***
